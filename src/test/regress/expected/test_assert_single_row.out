--
-- Test assert_single_row
--
CREATE SCHEMA test_assert_single_row;
SET search_path = test_assert_single_row, public;
CREATE TABLE foo (a int, b int);
--
-- Positive tests
--
-- Test INSERT ok
CREATE FUNCTION test_insert(_a int, _b int)
RETURNS BOOLEAN
SET assert_single_row = true
BEGIN ATOMIC
    INSERT INTO foo (a, b) VALUES (_a, _b)
    RETURNING TRUE;
END;
SELECT test_insert(1, 10);
 test_insert 
-------------
 t
(1 row)

SELECT test_insert(2, 20);
 test_insert 
-------------
 t
(1 row)

SELECT test_insert(3, 20);
 test_insert 
-------------
 t
(1 row)

-- Test SELECT ok
CREATE FUNCTION test_select(_b int)
RETURNS INT
SET assert_single_row = true
BEGIN ATOMIC
    SELECT a FROM foo WHERE b = _b;
END;
SELECT test_select(10);
 test_select 
-------------
           1
(1 row)

-- Test UPDATE ok
CREATE FUNCTION test_update(_a int, _b int)
RETURNS BOOLEAN
SET assert_single_row = true
BEGIN ATOMIC
    UPDATE foo SET a = _a WHERE b = _b
    RETURNING TRUE;
END;
SELECT test_update(4, 10);
 test_update 
-------------
 t
(1 row)

-- Test DELETE ok
CREATE FUNCTION test_delete(_a int)
RETURNS BOOLEAN
SET assert_single_row = true
BEGIN ATOMIC
    DELETE FROM foo WHERE a = _a
    RETURNING TRUE;
END;
SELECT test_delete(4);
 test_delete 
-------------
 t
(1 row)

--
-- Negative tests
--
-- Test SELECT fail
SELECT test_select(100);
ERROR:  query returned no rows
DETAIL:  SQL function with assert_single_row requires exactly one row, but statement returned 0 rows.
CONTEXT:  SQL function "test_select" statement 1
-- Test INSERT fail
CREATE OR REPLACE FUNCTION prevent_insert()
RETURNS trigger
LANGUAGE plpgsql AS $$
BEGIN
    RETURN NULL;
END;
$$;
CREATE TRIGGER foo_no_inserts
BEFORE INSERT ON foo
FOR EACH ROW
EXECUTE FUNCTION prevent_insert();
SELECT test_insert(5, 50);
ERROR:  query returned no rows
DETAIL:  SQL function with assert_single_row requires exactly one row, but statement returned 0 rows.
CONTEXT:  SQL function "test_insert" statement 1
DROP TRIGGER foo_no_inserts ON foo;
-- Test UPDATE fail
SELECT test_update(6, 60);
ERROR:  query returned no rows
DETAIL:  SQL function with assert_single_row requires exactly one row, but statement returned 0 rows.
CONTEXT:  SQL function "test_update" statement 1
-- Test DELETE fail
SELECT test_delete(4);
ERROR:  query returned no rows
DETAIL:  SQL function with assert_single_row requires exactly one row, but statement returned 0 rows.
CONTEXT:  SQL function "test_delete" statement 1
RESET search_path;
